module Day2 exposing (..)

import String
import Array exposing (..)

type alias TestRecord = ( String, String )
type alias KeyPad = Array (Array Int)
type alias KeyRow = Array Int
type alias Key = Int
type alias Position = ( Int, Int )

testData : String
testData = "ULL
RRDDD
LURDL
UUUUD"

puzzleInput : String
puzzleInput = "RUDULRLLUULRURDDRRUDURULLLDRLRLUDDLUDUDDUDRRDUDULDUUULLRULLRLDDLDLDDRLRRRRUDLLDDUULDRLLUDDRRUURLULRRRDLLURRUUDURUDDURLUDDDLUDDUUDUURUDLRDRDRLRDRLDRUDRUUDLRDDRRURDDLRDDRRURDUDDLULLUDRURURRRLRRUDUULULULRRLDLUDUURRLLRUDLLDRDDLRRRULRUDLULDDLLLULDLRUDLLLLRDDLRDRLDRLLRDRRDLRDULULRLLLDRUDRRRUULRUULDRURLUDRURRDLLDLRDLDDDDRRLUDLRRLUUUURDRDDLRRURURRDUULLRLURLURUDDDRDURDUUDRLRLRRLDDLDLDLDDDUDDULURLDDLLRLRRDULUDDLULRLUDDLDLRULUUUDRLDRUDURLUDDRLLRUULDLRRRRDLLLLURULLRDRRUDLUULRRDLLRLRLUDLDDULLDLLRDLDLL
LLUUUUUUDUDRLRDRDLDURRRLLRRLRURLLUURRLLUDUDLULUURUUURDLUDLDDLULLRDLRUULDLRDUDURLLDDUDUDULLUDDUULLLUULRRRLULRURRDLRUDUDDURRRDRUURDURLLULLRULLDRUULLURLDRDUUDDDDDDRRLDRLRRRLULDDUURRLLLLDRURLURDRDRDURUDUURRDUDUDRLLUUDDRLUDDDRDLDLRLDRURRDLLRULDRLLURURRLUULLRLRRURDDRDRUUURUURUUUDLLRRLUDRLDLRLURLDLUDDUDDDLDUDRRLDLRURULRLLRDUULURRRULDLLLRLDDDUURRRRDULLRURRLULULDLRRUDUDDLRUURDLDUDDUDRRDLRRRDUDUUUDLLDDDDLURLURRRUUULLLULRRLLLLLLULDUUDLRUDRRDLRDUUDUDLLRLDLLRUURDUUURUUUDDLLUUDLULDURLULULUUUDRUDULLURRULRULLRDLDDU
RLUUURULLDLRLDUDRDURRDUURLLUDDDUULRRRLRLURDDRUULUDULDUUDDDDUDDDDRUDDLDUUDRUDLRRRLLRDDLLLRLLRUULRUULDDRURRLURRLRLULDDRRRDDURDDRDRDULRUDRUUDULRLLULDLRLLDRULRDDRRDDUDLRLLUDRDRRRLUDULRDLRDDURRUUDDRRUDURRUUUDDRRDUDURLUUDUDUURDDDLURLULLUULULURUDUUDRUDULLUUULURDLDUULLDDLLDULRLRLRDUUURUUDLRLDURUDRLDULLUDLDLLRDUURRDUDURLUUUDLLRRULRLULRLDLLURDURRULRLLRRDUDLLRDRRRRDLUUDRUUUDDLRLUDDDDDDRURRRUUURRDLLRURLDDLLDLRRLLLDRRULRRUDLDRDDRRLULURLLUURURURRRRUUUUURUDURLRLLLULULDLLDLRDRRULUDUDRDRRDRDRRDUDLLLRUDRUDDDULRULRRRDRLRUUUURUDURDUUULLULRUDDULDUUDLDURRD
ULRULDDLDLULLLRRRLRUDDDDDLLDDUDLRRDULUUDRDLRRURDRRLUULRURUDRRULDLLLUDRUUDULULUDDRUDDDRDURRRDRDUUURLRDULUDRDRLDRUDDLLLDRRULUDLUDLDLLRRUDUULULDLDLLUURDLDDLLUUDURLURLLLDRDLDRRLRULUURRDRULRUUURULRRUDDDDLLDLDDLLRRLRRRRDUUDUDLDRDRRURDLRURULDLRDLLLLRUDRLLRDLRLRDURDRUDURRRLRDRDLLRLUDDDDRLRLLDUURRURLUURUULUDLUURDRRUDDLUDUDDDURRDRUDRLRULDULUUUUUUDDUDRUDUUURUDRRDLUDLUUDUULUDURDLDDDLLURRURUUDUDDRRDRLLULULDRLRURRDDDRDUUURDDDRULUDRDDLDURRLDDDLRRRLDDRDURULDLUDLLLURLURRLRRULDLLDDUDRRULDRRRRLURRUULRRRUDLURDLLDLLDULUUDRRLDLLLDRLRUDLUULDLDRUDUDURDRUDRDDDLRLULLUR
LRLUUURRLRRRRRUURRLLULRLULLDLUDLUDRDDRLDLRLULLURDURLURDLLRLDUUDDURRRRLDLLRULLRLDLLUUDRLDDLLDRULDRLLRURDLRURRUDLULLRURDLURRURUDULLDRLLUUULUDRURRUUDUDULUUULRLDDULDRDLUDDUDDDLRURULLDLLLRLLUURDLRUDLLLLDLLRLRUUUDDRUUUUDLDLRDDURLDURUULLLUUDLLLLDULRRRLLDLDRRDRLUDRUDURLLUDLRLLUDUDRDDDRDLRDLRULUULDRLUDLRLDUURLRRLUDDDUUDDDUDRLDLDUDLURUULLDDDURUUULRLUDLDURUUDRDRURUDDUURDUUUDLLDLDLDURUURLLLLRURUURURULRULLRUDLRRUUUUUDRRLLRDDUURDRDRDDDUDRLURDRRRUDLLLDURDLUUDLLUDDULUUDLDUUULLDRDLRURUURRDURRDLURRRRLLUUULRDULDDLDUURRDLDLLULRRLLUDLDUDLUUL"


keyPad : KeyPad
keyPad = 
    Array.fromList 
        [ Array.fromList [ 0, 0, 0 ,0 ,0 ]
        , Array.fromList [ 0, 1, 2 ,3 ,0 ]
        , Array.fromList [ 0, 4, 5 ,6 ,0 ]
        , Array.fromList [ 0, 7, 8 ,9 ,0 ]
        , Array.fromList [ 0, 0, 0, 0 ,0 ]
        ]


starPad : KeyPad
starPad =
    Array.fromList
        [ Array.fromList [ 0, 0, 0 , 0 , 0,  0, 0 ]
        , Array.fromList [ 0, 0, 0 , 1 , 0,  0, 0 ]
        , Array.fromList [ 0, 0, 2 , 3 , 4,  0, 0 ]
        , Array.fromList [ 0, 5, 6 , 7 , 8,  9, 0 ]
        , Array.fromList [ 0, 0, 10, 11, 12, 0, 0 ]
        , Array.fromList [ 0, 0, 0 , 13, 0,  0, 0 ]
        , Array.fromList [ 0, 0, 0 , 0 , 0,  0, 0 ]
        ]

pos : Position
pos = 
    ( 1, 1 )

getRow : KeyPad -> Int -> KeyRow
getRow pad index = 
     case Array.get index pad of
        Just val ->
            val
        Nothing ->
            Array.initialize 3 (always 0)
     


getCol : KeyRow -> Int -> Key
getCol row index =
    case Array.get index row of
        Just val ->
            val
        Nothing ->
            0  


getKey : KeyPad -> Position -> Key
getKey keyPad ( x, y ) = 
    let
        row = getRow keyPad y

        key = getCol row x
    in 
        key


move : String -> Position -> Position
move instruction (x, y)  = 
    case instruction of
        "U" -> shiftUp ( x, y )
        "D" -> shiftDown ( x, y )
        "L" -> shiftLeft ( x, y )
        "R" -> shiftRight ( x, y )
        _ -> ( 0 , 0 )


shiftUp : Position -> Position
shiftUp ( x, y ) = 
    if y > 0 then
        ( x, y - 1 )
    else
        ( x, y )


shiftDown : Position -> Position
shiftDown ( x, y ) = 
    if y < 2 then
        ( x, y + 1 )
    else
        ( x, y )


shiftLeft : Position -> Position
shiftLeft ( x, y ) = 
    if x > 0 then
        ( x - 1, y  )
    else
        ( x, y )


shiftRight : Position -> Position
shiftRight ( x, y ) = 
    if x < 2 then
        ( x + 1, y  )
    else
        ( x , y )


processLine: String -> Position -> Position
processLine inputData (x, y ) = 
    let
        commands = String.toList inputData |> List.map String.fromChar 
        
        newPosition = List.foldr move ( x , y ) commands
    in
        newPosition

